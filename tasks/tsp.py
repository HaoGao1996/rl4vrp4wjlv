"""Defines the main task for the TSP

The TSP is defined by the following traits:
    1. Each city in the list must be visited once and only once
    2. The salesman must return to the original node at the end of the tour

Since the TSP doesn't have dynamic elements, we return an empty list on
__getitem__, which gets processed in trainer.py to be None

"""

import os
import numpy as np
import torch
from torch.utils.data import Dataset
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import pandas as pd

import requests
from ast import literal_eval
from shapely.geometry import Point
from shapely.geometry.polygon import Polygon
import json
import math
from shapely.wkt import dumps, loads
import time
import warnings
import datetime
warnings.filterwarnings("ignore")
import json


def get_features(data, idx, grid2idx, region2idx, grid2region):
    """
    param: data
    param: idx
    param: grid2idx
    param: region2idx
    param: grid2region
    return: DataFrame (num_grids, num_features)
    ----------------------------
    index: grid_id
    features: [latitude, longitude, morning_amount, afternoon_amount, 'arrival_time',
              region_id, final_time, final_location]
    """
    # to pandas
    df_grid_features = pd.DataFrame(index=grid2idx.keys())
    df_grid_location_gps = pd.DataFrame(eval(data.loc[idx, 'GPS_location']),
                                        index=['latitude', 'longitude']).T
    df_morning_amount = pd.DataFrame(eval(data.loc[idx, 'morning_amount']),
                                     index=['morning_amount']).T
    df_afternoon_amount = pd.DataFrame(eval(data.loc[idx, 'afternoon_amount']),
                                       index=['afternoon_amount']).T
    df_arrival_time = pd.DataFrame(eval(data.loc[idx, 'arrival_time']),
                                   index=['arrival_time']).T
    df_region_id = pd.DataFrame(grid2region, index=['region_id']).T

    df_grid_features = df_grid_features.join([df_grid_location_gps, df_morning_amount,
                                              df_afternoon_amount, df_arrival_time,
                                              df_region_id], how='left').rename_axis('grid_id').reset_index()

    df_region_features = pd.DataFrame(index=region2idx.keys())
    df_final_time = pd.DataFrame(eval(data.loc[idx, 'final_time']),
                                 index=['final_time']).T
    df_final_location = pd.DataFrame(eval(data.loc[idx, 'final_location']),
                                     index=['final_location']).T
    df_region_features = df_region_features.join([df_final_time, df_final_location],
                                                 how='left').rename_axis('region_id').reset_index()

    df = pd.merge(df_grid_features, df_region_features, on='region_id', how='left')
    df[['arrival_time', 'final_time']] = df[['arrival_time', 'final_time']].fillna('1999-01-01 00:00:00.000000')
    df['arrival_time'] = (
                pd.to_datetime(df['arrival_time']) - pd.to_datetime('1999-01-01 00:00:00.000000')).dt.total_seconds()
    df['final_time'] = (
                pd.to_datetime(df['final_time']) - pd.to_datetime('1999-01-01 00:00:00.000000')).dt.total_seconds()

    # to tensor and return
    return torch.tensor(df.values).T


def get_agg_matrix(grid2idx, region2idx, grid2region):
    agg_matrix = pd.DataFrame(data=0, index=grid2idx.keys(), columns=region2idx.keys())
    for idx, col in grid2region.items():
        agg_matrix.loc[idx, col] = 1
    agg_matrix /= agg_matrix.sum()
    return torch.tensor(agg_matrix.values)

class TSPDataset(Dataset):
    def __init__(self, file_name):
        super(TSPDataset, self).__init__()
        self.file_name = file_name
        self.data = pd.read_csv(self.file_name)
        self.size = len(self.data)

        self.grid2idx = {key: i for i, key in enumerate(eval(self.data.loc[0, 'GPS_location']).keys())}
        self.num_grids = len(self.grid2idx)

        self.region2idx = {key: i for i, key in enumerate(eval(self.data.loc[0, 'dic_final']).keys())}
        self.num_regions = len(self.region2idx)

        self.grid2region = {grid: region for region in self.region2grid.keys() for grid in self.region2grid[region]}

        # (size, static_size, num_regions)
        self.dataset = torch.stack([get_features(self.data, idx,
                                                 self.grid2idx, self.region2idx,
                                                 self.grid2region) for idx in range(10)], dim=0)

        self.num_nodes = self.num_regions
        self.dynamic = torch.zeros(self.size, 1, self.num_nodes)
        self.static_size = self.dataset.shape[1]
        self.dynamic_size = 1
        self.agg_matrix = get_agg_matrix(self.grid2idx,
                                         self.region2idx,
                                         self.grid2region)  # (num_grids, nums_regions)

    def __len__(self):
        return self.size

    def __getitem__(self, idx):
        # (static, dynamic, start_loc)
        return (self.dataset[idx], self.dynamic[idx], [])


def update_mask(mask, dynamic, chosen_idx):
    """Marks the visited city, so it can't be selected a second time."""
    mask.scatter_(1, chosen_idx.unsqueeze(1), 0)
    return mask



def getDist(lat1, lon1, lat2, lon2):
    if lon1 == lon2 and lat1 == lat2:
        return 0.0
    theta = lon1 - lon2
    dist = math.sin(deg2rad(lat1)) * math.sin(deg2rad(lat2)) + math.cos(deg2rad(lat1)) * math.cos(deg2rad(lat2)) * math.cos(deg2rad(theta))
    if dist > 1.0:
        dist = 1.0
    dist = rad2deg(math.acos(dist)) * 60 * 1.1515 * 1.609344
    return dist
def deg2rad(deg):
    return deg * math.pi / 180.0
def rad2deg(rad):
    return rad * 180.0 / math.pi

#返回下午订单的完成时间
def deliverytime_calculate(l,afternoon_amount,start, finaltime,GPS_location):  #l: 订单所在的grid组成的list, afternoon_amount: grid的订单量，start:起始点的grid，final_time：起始点的时间
    t_order=0  #每一单的配送时间
    v=1.14*2*2 #add
    current_loc=start
    time_result=finaltime
    total_delivery_time=0
    #print('l',l)
    while len(l)>0:
        mini=getDist(GPS_location[current_loc][0],GPS_location[current_loc][1],GPS_location[l[0]][0],GPS_location[l[0]][1])*1000/v
        nxt=l[0]
        for i in range(len(l)):
            if getDist(GPS_location[current_loc][0],GPS_location[current_loc][1],GPS_location[l[i]][0],GPS_location[l[i]][1])*1000/v<mini:
                mini=getDist(GPS_location[current_loc][0],GPS_location[current_loc][1],GPS_location[l[i]][0],GPS_location[l[i]][1])*1000/v
                nxt=l[i]
        amt=afternoon_amount[nxt]
        #print('next',nxt,amt, mini)
        time_result=datetime.timedelta(seconds=mini+t_order*amt)+time_result
        #print('delivery_time',time_result, finaltime,(time_result-finaltime).total_seconds())
        total_delivery_time=total_delivery_time+(time_result-finaltime).total_seconds()*amt
        l.remove(nxt)
        current_loc=nxt
    #return time_result
    #print('total_delivery_time',total_delivery_time)
    return total_delivery_time


def relay_time_func(route, GPS_location, v_relay, dic_final, morning_amount, afternoon_amount, arrival_time, final_time, final_location):
    t_start="2022-01-01 10:00:00" 
    t_start=datetime.datetime.strptime(t_start, "%Y-%m-%d %H:%M:%S")
    relay_location=(31.25971,121.4227)
    relay_time="2022-01-01 10:00:00" 
    relay_time=datetime.datetime.strptime(relay_time, "%Y-%m-%d %H:%M:%S")
    total_time=0
    for i in range(len(route)):
        l=dic_final[route[i]] #每个路区里的格子
        l_final=[]
        sum_amount=0
        for j in l:
            if afternoon_amount[j]>0:
                sum_amount=sum_amount+afternoon_amount[j]
                l_final.append(j)

        
        
        t_temp=getDist(GPS_location[final_location[route[i]]][0],GPS_location[final_location[route[i]]][1],relay_location[0],relay_location[1])*1000/v_relay
        relay_arrival_t=relay_time+datetime.timedelta(seconds=t_temp)
        #print(relay_arrival_t)
        if (relay_arrival_t-final_time[route[i]]).total_seconds()>0:   #配送员等接驳员
            #print('111',total_time, (relay_arrival_t-t_start).total_seconds())
            total_time=total_time+(relay_arrival_t-t_start).total_seconds()*sum_amount    #从站点到配送员 
            #print('222',total_time, sum_amount)
            #print(l_final)
            time1=deliverytime_calculate(l_final,afternoon_amount,final_location[route[i]],relay_arrival_t,GPS_location)
            total_time=total_time+time1
            #total_time=total_time+(time1-relay_arrival_t).total_seconds()  #从配送员到顾客
            
            
        else:  #接驳员等配送员 ->可以进行订单合并
            #print('333',total_time, final_time[route[i]],(final_time[route[i]]-t_start).total_seconds())
            total_time=total_time+(final_time[route[i]]-t_start).total_seconds()*sum_amount
            #print('444',total_time, sum_amount)
            l_final_morning=[] 
            for k in l:
                if morning_amount[k]>0:
                    if arrival_time[k]>relay_arrival_t:
                        l_final_morning.append(k)
            
            #在下午的订单里不能合并的上午订单
            l_final_afternoon=[]
            for m in l_final:
                for n in l_final_morning:
                    if getDist(GPS_location[m][0],GPS_location[m][1],GPS_location[n][0],GPS_location[n][1])>0.2:
                        l_final_afternoon.append(m)
                        continue
            l_final_afternoon=list(set(l_final_afternoon))
            #time1=deliverytime_calculate(l_final,afternoon_amount,final_location[route[i]],final_time[route[i]])
            time2=deliverytime_calculate(l_final_afternoon,afternoon_amount,final_location[route[i]],final_time[route[i]],GPS_location)
            #benefit=(time1-time2).total_seconds()
            #total_time=total_time+(time2-final_time[route[i]]).total_seconds()
            #print('time2',time2)
            total_time=total_time+time2
            
        relay_time=relay_arrival_t   
        #relay_location=central[final_location[route[i]]-1]
        relay_location=GPS_location[final_location[route[i]]]
    return total_time  




def reward(static, tour_indices):
    """
    Parameters
    ----------
    static: torch.FloatTensor containing static (e.g. x, y) data
    tour_indices: torch.IntTensor of size (batch_size, num_cities)

    Returns
    -------
    Euclidean distance between consecutive nodes on the route. of size
    (batch_size, num_cities)
    """
    v=1.14*2*2 # 配送员的速度：5km/h
    #t_order=120 #每单配送时间是120s
    v_relay=5.56*2   #20km/h
    #dic_final 输入的确定常数

    GPS_location={822: (31.2675, 121.42150000000001), 792: (31.2675, 121.4205), 761: (31.2665, 121.41950000000001), 762: (31.2675, 121.41950000000001), 763: (31.2685, 121.41950000000001), 732: (31.2675, 121.41850000000001), 733: (31.2685, 121.41850000000001), 399: (31.264499999999998, 121.40750000000001), 368: (31.2635, 121.40650000000001), 369: (31.264499999999998, 121.40650000000001), 370: (31.2655, 121.40650000000001), 339: (31.264499999999998, 121.4055), 371: (31.2665, 121.40650000000001), 340: (31.2655, 121.4055), 338: (31.2635, 121.4055), 400: (31.2655, 121.40750000000001), 341: (31.2665, 121.4055), 367: (31.2625, 121.40650000000001), 401: (31.2665, 121.40750000000001), 578: (31.2635, 121.41350000000001), 547: (31.2625, 121.41250000000001), 548: (31.2635, 121.41250000000001), 517: (31.2625, 121.4115), 518: (31.2635, 121.4115), 519: (31.264499999999998, 121.4115), 488: (31.2635, 121.41050000000001), 489: (31.264499999999998, 121.41050000000001), 490: (31.2655, 121.41050000000001), 549: (31.264499999999998, 121.41250000000001), 520: (31.2655, 121.4115), 579: (31.264499999999998, 121.41350000000001), 1088: (31.2635, 121.43050000000001), 1089: (31.264499999999998, 121.43050000000001), 1058: (31.2635, 121.4295), 1059: (31.264499999999998, 121.4295), 1090: (31.2655, 121.43050000000001), 1060: (31.2655, 121.4295), 1030: (31.2655, 121.42850000000001), 1057: (31.2625, 121.4295), 1000: (31.2655, 121.42750000000001), 969: (31.264499999999998, 121.4265), 939: (31.264499999999998, 121.42550000000001), 909: (31.264499999999998, 121.42450000000001), 878: (31.2635, 121.4235), 879: (31.264499999999998, 121.4235), 848: (31.2635, 121.42250000000001), 1087: (31.2625, 121.43050000000001), 887: (31.272499999999997, 121.4235), 919: (31.2745, 121.42450000000001), 945: (31.2705, 121.42550000000001), 946: (31.2715, 121.42550000000001), 915: (31.2705, 121.42450000000001), 916: (31.2715, 121.42450000000001), 947: (31.272499999999997, 121.42550000000001), 917: (31.272499999999997, 121.42450000000001), 948: (31.2735, 121.42550000000001), 949: (31.2745, 121.42550000000001), 886: (31.2715, 121.4235), 918: (31.2735, 121.42450000000001), 1067: (31.272499999999997, 121.4295), 1068: (31.2735, 121.4295), 1037: (31.272499999999997, 121.42850000000001), 1038: (31.2735, 121.42850000000001), 1007: (31.272499999999997, 121.42750000000001), 641: (31.2665, 121.41550000000001), 642: (31.2675, 121.41550000000001), 790: (31.2655, 121.4205), 670: (31.2655, 121.41650000000001), 671: (31.2665, 121.41650000000001), 672: (31.2675, 121.41650000000001), 673: (31.2685, 121.41650000000001), 819: (31.264499999999998, 121.42150000000001), 820: (31.2655, 121.42150000000001), 700: (31.2655, 121.4175), 701: (31.2665, 121.4175), 702: (31.2675, 121.4175), 703: (31.2685, 121.4175), 849: (31.264499999999998, 121.42250000000001), 850: (31.2655, 121.42250000000001), 730: (31.2655, 121.41850000000001), 731: (31.2665, 121.41850000000001), 760: (31.2655, 121.41950000000001), 1291: (31.2565, 121.43750000000001), 1292: (31.2575, 121.43750000000001), 1172: (31.2575, 121.43350000000001), 1173: (31.258499999999998, 121.43350000000001), 1174: (31.2595, 121.43350000000001), 1202: (31.2575, 121.43450000000001), 1203: (31.258499999999998, 121.43450000000001), 1204: (31.2595, 121.43450000000001), 1083: (31.258499999999998, 121.43050000000001), 1084: (31.2595, 121.43050000000001), 1232: (31.2575, 121.4355), 1233: (31.258499999999998, 121.4355), 1234: (31.2595, 121.4355), 1112: (31.2575, 121.43150000000001), 1113: (31.258499999999998, 121.43150000000001), 1114: (31.2595, 121.43150000000001), 1115: (31.2605, 121.43150000000001), 1116: (31.261499999999998, 121.43150000000001), 1117: (31.2625, 121.43150000000001), 1262: (31.2575, 121.43650000000001), 1263: (31.258499999999998, 121.43650000000001), 1265: (31.2605, 121.43650000000001), 1142: (31.2575, 121.4325), 1143: (31.258499999999998, 121.4325), 1144: (31.2595, 121.4325), 1146: (31.261499999999998, 121.4325), 1147: (31.2625, 121.4325), 785: (31.2605, 121.4205), 786: (31.261499999999998, 121.4205), 788: (31.2635, 121.4205), 789: (31.264499999999998, 121.4205), 814: (31.2595, 121.42150000000001), 815: (31.2605, 121.42150000000001), 816: (31.261499999999998, 121.42150000000001), 817: (31.2625, 121.42150000000001), 818: (31.2635, 121.42150000000001), 845: (31.2605, 121.42250000000001), 847: (31.2625, 121.42250000000001), 727: (31.2625, 121.41850000000001), 755: (31.2605, 121.41950000000001), 756: (31.261499999999998, 121.41950000000001), 757: (31.2625, 121.41950000000001), 758: (31.2635, 121.41950000000001), 759: (31.264499999999998, 121.41950000000001), 904: (31.2595, 121.42450000000001), 905: (31.2605, 121.42450000000001), 906: (31.261499999999998, 121.42450000000001), 907: (31.2625, 121.42450000000001), 908: (31.2635, 121.42450000000001), 934: (31.2595, 121.42550000000001), 935: (31.2605, 121.42550000000001), 936: (31.261499999999998, 121.42550000000001), 937: (31.2625, 121.42550000000001), 938: (31.2635, 121.42550000000001), 968: (31.2635, 121.4265), 844: (31.2595, 121.42250000000001), 846: (31.261499999999998, 121.42250000000001), 998: (31.2635, 121.42750000000001), 999: (31.264499999999998, 121.42750000000001), 874: (31.2595, 121.4235), 875: (31.2605, 121.4235), 876: (31.261499999999998, 121.4235), 877: (31.2625, 121.4235), 1025: (31.2605, 121.42850000000001), 1026: (31.261499999999998, 121.42850000000001), 1027: (31.2625, 121.42850000000001), 1028: (31.2635, 121.42850000000001), 1029: (31.264499999999998, 121.42850000000001), 964: (31.2595, 121.4265), 965: (31.2605, 121.4265), 966: (31.261499999999998, 121.4265), 967: (31.2625, 121.4265), 995: (31.2605, 121.42750000000001), 996: (31.261499999999998, 121.42750000000001), 997: (31.2625, 121.42750000000001), 1024: (31.2595, 121.42850000000001), 1053: (31.258499999999998, 121.4295), 1054: (31.2595, 121.4295), 1055: (31.2605, 121.4295), 1056: (31.261499999999998, 121.4295), 1085: (31.2605, 121.43050000000001), 1086: (31.261499999999998, 121.43050000000001), 963: (31.258499999999998, 121.4265), 993: (31.258499999999998, 121.42750000000001), 994: (31.2595, 121.42750000000001), 1023: (31.258499999999998, 121.42850000000001), 1152: (31.2675, 121.4325), 1153: (31.2685, 121.4325), 1154: (31.2695, 121.4325), 1155: (31.2705, 121.4325), 1179: (31.264499999999998, 121.43350000000001), 1180: (31.2655, 121.43350000000001), 1181: (31.2665, 121.43350000000001), 1182: (31.2675, 121.43350000000001), 1183: (31.2685, 121.43350000000001), 1184: (31.2695, 121.43350000000001), 1185: (31.2705, 121.43350000000001), 1208: (31.2635, 121.43450000000001), 1209: (31.264499999999998, 121.43450000000001), 1210: (31.2655, 121.43450000000001), 1211: (31.2665, 121.43450000000001), 1212: (31.2675, 121.43450000000001), 1213: (31.2685, 121.43450000000001), 1214: (31.2695, 121.43450000000001), 1215: (31.2705, 121.43450000000001), 1240: (31.2655, 121.4355), 1241: (31.2665, 121.4355), 1242: (31.2675, 121.4355), 1243: (31.2685, 121.4355), 1244: (31.2695, 121.4355), 1119: (31.264499999999998, 121.43150000000001), 1120: (31.2655, 121.43150000000001), 1122: (31.2675, 121.43150000000001), 1273: (31.2685, 121.43650000000001), 1274: (31.2695, 121.43650000000001), 1148: (31.2635, 121.4325), 1149: (31.264499999999998, 121.4325), 1150: (31.2655, 121.4325), 1151: (31.2665, 121.4325), 1293: (31.258499999999998, 121.43750000000001), 1294: (31.2595, 121.43750000000001), 1295: (31.2605, 121.43750000000001), 1296: (31.261499999999998, 121.43750000000001), 1321: (31.2565, 121.4385), 1322: (31.2575, 121.4385), 1323: (31.258499999999998, 121.4385), 1324: (31.2595, 121.4385), 1325: (31.2605, 121.4385), 1326: (31.261499999999998, 121.4385), 1205: (31.2605, 121.43450000000001), 1351: (31.2565, 121.43950000000001), 1352: (31.2575, 121.43950000000001), 1353: (31.258499999999998, 121.43950000000001), 1354: (31.2595, 121.43950000000001), 1355: (31.2605, 121.43950000000001), 1235: (31.2605, 121.4355), 1381: (31.2565, 121.44050000000001), 1382: (31.2575, 121.44050000000001), 1383: (31.258499999999998, 121.44050000000001), 1384: (31.2595, 121.44050000000001), 1264: (31.2595, 121.43650000000001), 1297: (31.2625, 121.43750000000001), 1298: (31.2635, 121.43750000000001), 1175: (31.2605, 121.43350000000001), 1176: (31.261499999999998, 121.43350000000001), 1177: (31.2625, 121.43350000000001), 1178: (31.2635, 121.43350000000001), 1206: (31.261499999999998, 121.43450000000001), 1207: (31.2625, 121.43450000000001), 1236: (31.261499999999998, 121.4355), 1237: (31.2625, 121.4355), 1238: (31.2635, 121.4355), 1239: (31.264499999999998, 121.4355), 1266: (31.261499999999998, 121.43650000000001), 1267: (31.2625, 121.43650000000001), 1268: (31.2635, 121.43650000000001), 1269: (31.264499999999998, 121.43650000000001), 1270: (31.2655, 121.43650000000001), 1145: (31.2605, 121.4325), 910: (31.2655, 121.42450000000001), 1040: (31.275499999999997, 121.42850000000001), 1039: (31.2745, 121.42850000000001), 1041: (31.2765, 121.42850000000001), 911: (31.2665, 121.42450000000001), 793: (31.2685, 121.4205), 1070: (31.275499999999997, 121.4295), 821: (31.2665, 121.42150000000001), 823: (31.2685, 121.42150000000001), 975: (31.2705, 121.4265), 976: (31.2715, 121.4265), 977: (31.272499999999997, 121.4265), 851: (31.2665, 121.42250000000001), 852: (31.2675, 121.42250000000001), 853: (31.2685, 121.42250000000001), 1005: (31.2705, 121.42750000000001), 880: (31.2655, 121.4235), 881: (31.2665, 121.4235), 1008: (31.2735, 121.42750000000001), 883: (31.2685, 121.4235), 882: (31.2675, 121.4235), 896: (31.281499999999998, 121.4235), 769: (31.2745, 121.41950000000001), 920: (31.275499999999997, 121.42450000000001), 798: (31.2735, 121.4205), 799: (31.2745, 121.4205), 800: (31.275499999999997, 121.4205), 829: (31.2745, 121.42150000000001), 830: (31.275499999999997, 121.42150000000001), 831: (31.2765, 121.42150000000001), 834: (31.2795, 121.42150000000001), 835: (31.2805, 121.42150000000001), 858: (31.2735, 121.42250000000001), 859: (31.2745, 121.42250000000001), 860: (31.275499999999997, 121.42250000000001), 
              861: (31.2765, 121.42250000000001), 862: (31.2775, 121.42250000000001), 863: (31.278499999999998, 121.42250000000001), 864: (31.2795, 121.42250000000001), 865: (31.2805, 121.42250000000001), 866: (31.281499999999998, 121.42250000000001), 888: (31.2735, 121.4235), 889: (31.2745, 121.4235), 890: (31.275499999999997, 121.4235), 891: (31.2765, 121.4235), 893: (31.278499999999998, 121.4235), 894: (31.2795, 121.4235), 921: (31.2765, 121.42450000000001), 922: (31.2775, 121.42450000000001), 923: (31.278499999999998, 121.42450000000001), 924: (31.2795, 121.42450000000001), 950: (31.275499999999997, 121.42550000000001), 951: (31.2765, 121.42550000000001), 952: (31.2775, 121.42550000000001), 953: (31.278499999999998, 121.42550000000001), 954: (31.2795, 121.42550000000001), 978: (31.2735, 121.4265), 979: (31.2745, 121.4265), 980: (31.275499999999997, 121.4265), 981: (31.2765, 121.4265), 982: (31.2775, 121.4265), 983: (31.278499999999998, 121.4265), 1009: (31.2745, 121.42750000000001), 1010: (31.275499999999997, 121.42750000000001), 1011: (31.2765, 121.42750000000001), 1012: (31.2775, 121.42750000000001), 1033: (31.2685, 121.42850000000001), 1034: (31.2695, 121.42850000000001), 912: (31.2675, 121.42450000000001), 913: (31.2685, 121.42450000000001), 914: (31.2695, 121.42450000000001), 941: (31.2665, 121.42550000000001), 942: (31.2675, 121.42550000000001), 943: (31.2685, 121.42550000000001), 944: (31.2695, 121.42550000000001), 971: (31.2665, 121.4265), 972: (31.2675, 121.4265), 973: (31.2685, 121.4265), 974: (31.2695, 121.4265), 1001: (31.2665, 121.42750000000001), 1002: (31.2675, 121.42750000000001), 1003: (31.2685, 121.42750000000001), 1004: (31.2695, 121.42750000000001), 884: (31.2695, 121.4235), 1156: (31.2715, 121.4325), 1035: (31.2705, 121.42850000000001), 1036: (31.2715, 121.42850000000001), 1186: (31.2715, 121.43350000000001), 1063: (31.2685, 121.4295), 1064: (31.2695, 121.4295), 1065: (31.2705, 121.4295), 1066: (31.2715, 121.4295), 1069: (31.2745, 121.4295), 1093: (31.2685, 121.43050000000001), 1094: (31.2695, 121.43050000000001), 1095: (31.2705, 121.43050000000001), 1096: (31.2715, 121.43050000000001), 1097: (31.272499999999997, 121.43050000000001), 1098: (31.2735, 121.43050000000001), 1123: (31.2685, 121.43150000000001), 1124: (31.2695, 121.43150000000001), 1125: (31.2705, 121.43150000000001), 1126: (31.2715, 121.43150000000001), 1127: (31.272499999999997, 121.43150000000001), 1128: (31.2735, 121.43150000000001), 1006: (31.2715, 121.42750000000001), 795: (31.2705, 121.4205), 796: (31.2715, 121.4205), 797: (31.272499999999997, 121.4205), 825: (31.2705, 121.42150000000001), 826: (31.2715, 121.42150000000001), 827: (31.272499999999997, 121.42150000000001), 828: (31.2735, 121.42150000000001), 854: (31.2695, 121.42250000000001), 855: (31.2705, 121.42250000000001), 856: (31.2715, 121.42250000000001), 857: (31.272499999999997, 121.42250000000001), 885: (31.2705, 121.4235), 1031: (31.2665, 121.42850000000001), 1032: (31.2675, 121.42850000000001), 1061: (31.2665, 121.4295), 1062: (31.2675, 121.4295), 940: (31.2655, 121.42550000000001), 1091: (31.2665, 121.43050000000001), 1092: (31.2675, 121.43050000000001), 970: (31.2655, 121.4265), 1118: (31.2635, 121.43150000000001), 1121: (31.2665, 121.43150000000001), 774: (31.2795, 121.41950000000001), 775: (31.2805, 121.41950000000001), 776: (31.281499999999998, 121.41950000000001), 777: (31.2825, 121.41950000000001), 778: (31.2835, 121.41950000000001), 779: (31.284499999999998, 121.41950000000001), 801: (31.2765, 121.4205), 804: (31.2795, 121.4205), 805: (31.2805, 121.4205), 806: (31.281499999999998, 121.4205), 807: (31.2825, 121.4205), 808: (31.2835, 121.4205), 809: (31.284499999999998, 121.4205), 684: (31.2795, 121.41650000000001), 685: (31.2805, 121.41650000000001), 686: (31.281499999999998, 121.41650000000001), 832: (31.2775, 121.42150000000001), 833: (31.278499999999998, 121.42150000000001), 836: (31.281499999999998, 121.42150000000001), 837: (31.2825, 121.42150000000001), 838: (31.2835, 121.42150000000001), 839: (31.284499999999998, 121.42150000000001), 714: (31.2795, 121.4175), 715: (31.2805, 121.4175), 716: (31.281499999999998, 121.4175), 744: (31.2795, 121.41850000000001), 745: (31.2805, 121.41850000000001), 746: (31.281499999999998, 121.41850000000001), 644: (31.2695, 121.41550000000001), 645: (31.2705, 121.41550000000001), 646: (31.2715, 121.41550000000001), 647: (31.272499999999997, 121.41550000000001), 794: (31.2695, 121.4205), 674: (31.2695, 121.41650000000001), 675: (31.2705, 121.41650000000001), 676: (31.2715, 121.41650000000001), 677: (31.272499999999997, 121.41650000000001), 824: (31.2695, 121.42150000000001), 704: (31.2695, 121.4175), 705: (31.2705, 121.4175), 706: (31.2715, 121.4175), 707: (31.272499999999997, 121.4175), 734: (31.2695, 121.41850000000001), 735: (31.2705, 121.41850000000001), 736: (31.2715, 121.41850000000001), 764: (31.2695, 121.41950000000001), 765: (31.2705, 121.41950000000001), 643: (31.2685, 121.41550000000001), 528: (31.2735, 121.4115), 555: (31.2705, 121.41250000000001), 557: (31.272499999999997, 121.41250000000001), 558: (31.2735, 121.41250000000001), 581: (31.2665, 121.41350000000001), 582: (31.2675, 121.41350000000001), 584: (31.2695, 121.41350000000001), 585: (31.2705, 121.41350000000001), 586: (31.2715, 121.41350000000001), 587: (31.272499999999997, 121.41350000000001), 588: (31.2735, 121.41350000000001), 611: (31.2665, 121.4145), 612: (31.2675, 121.4145), 613: (31.2685, 121.4145), 614: (31.2695, 121.4145), 615: (31.2705, 121.4145), 616: (31.2715, 121.4145), 617: (31.272499999999997, 121.4145), 618: (31.2735, 121.4145), 404: (31.2695, 121.40750000000001), 406: (31.2715, 121.40750000000001), 407: (31.272499999999997, 121.40750000000001), 408: (31.2735, 121.40750000000001), 409: (31.2745, 121.40750000000001), 410: (31.275499999999997, 121.40750000000001), 434: (31.2695, 121.4085), 435: (31.2705, 121.4085), 436: (31.2715, 121.4085), 437: (31.272499999999997, 121.4085), 438: (31.2735, 121.4085), 439: (31.2745, 121.4085), 440: (31.275499999999997, 121.4085), 441: (31.2765, 121.4085), 464: (31.2695, 121.40950000000001), 465: (31.2705, 121.40950000000001), 466: (31.2715, 121.40950000000001), 467: (31.272499999999997, 121.40950000000001), 468: (31.2735, 121.40950000000001), 469: (31.2745, 121.40950000000001), 470: (31.275499999999997, 121.40950000000001), 471: (31.2765, 121.40950000000001), 349: (31.2745, 121.4055), 494: (31.2695, 121.41050000000001), 495: (31.2705, 121.41050000000001), 496: (31.2715, 121.41050000000001), 497: (31.272499999999997, 121.41050000000001), 498: (31.2735, 121.41050000000001), 499: (31.2745, 121.41050000000001), 500: (31.275499999999997, 121.41050000000001), 379: (31.2745, 121.40650000000001), 380: (31.275499999999997, 121.40650000000001), 609: (31.264499999999998, 121.4145), 610: (31.2655, 121.4145), 580: (31.2655, 121.41350000000001), 550: (31.2655, 121.41250000000001), 551: (31.2665, 121.41250000000001), 552: (31.2675, 121.41250000000001), 521: (31.2665, 121.4115), 640: (31.2655, 121.41550000000001), 666: (31.261499999999998, 121.41650000000001), 667: (31.2625, 121.41650000000001), 668: (31.2635, 121.41650000000001), 669: (31.264499999999998, 121.41650000000001), 696: (31.261499999999998, 121.4175), 697: (31.2625, 121.4175), 698: (31.2635, 121.4175), 699: (31.264499999999998, 121.4175), 728: (31.2635, 121.41850000000001), 729: (31.264499999999998, 121.41850000000001), 606: (31.261499999999998, 121.4145), 607: (31.2625, 121.4145), 636: (31.261499999999998, 121.41550000000001), 637: (31.2625, 121.41550000000001), 638: (31.2635, 121.41550000000001), 639: (31.264499999999998, 121.41550000000001), 516: (31.261499999999998, 121.4115), 522: (31.2675, 121.4115), 523: (31.2685, 121.4115), 397: (31.2625, 121.40750000000001), 398: (31.2635, 121.40750000000001), 546: (31.261499999999998, 121.41250000000001), 428: (31.2635, 121.4085), 429: (31.264499999999998, 121.4085), 430: (31.2655, 121.4085), 695: (31.2605, 121.4175), 576: (31.261499999999998, 121.41350000000001), 577: (31.2625, 121.41350000000001), 457: (31.2625, 121.40950000000001), 459: (31.264499999999998, 121.40950000000001), 460: (31.2655, 121.40950000000001), 725: (31.2605, 121.41850000000001), 726: (31.261499999999998, 121.41850000000001), 608: (31.2635, 121.4145), 486: (31.261499999999998, 121.41050000000001), 487: (31.2625, 121.41050000000001), 491: (31.2665, 121.41050000000001), 492: (31.2675, 121.41050000000001), 493: (31.2685, 121.41050000000001), 524: (31.2695, 121.4115), 402: (31.2675, 121.40750000000001), 403: (31.2685, 121.40750000000001), 553: (31.2685, 121.41250000000001), 554: (31.2695, 121.41250000000001), 431: (31.2665, 121.4085), 432: (31.2675, 121.4085), 433: (31.2685, 121.4085), 583: (31.2685, 121.41350000000001), 461: (31.2665, 121.40950000000001), 462: (31.2675, 121.40950000000001), 463: (31.2685, 121.40950000000001), 342: (31.2675, 121.4055), 343: (31.2685, 121.4055), 372: (31.2675, 121.40650000000001), 373: (31.2685, 121.40650000000001), 256: (31.2715, 121.4025), 255: (31.2705, 121.4025), 346: (31.2715, 121.4055), 284: (31.2695, 121.40350000000001), 344: (31.2695, 121.4055), 345: (31.2705, 121.4055), 314: (31.2695, 121.40450000000001), 315: (31.2705, 121.40450000000001), 316: (31.2715, 121.40450000000001), 285: (31.2705, 121.40350000000001), 254: (31.2695, 121.4025), 286: (31.2715, 121.40350000000001), 257: (31.272499999999997, 121.4025), 135: (31.2705, 121.39850000000001), 14: (31.2695, 121.39450000000001), 15: (31.2705, 121.39450000000001), 164: (31.2695, 121.3995), 165: (31.2705, 121.3995), 166: (31.2715, 121.3995), 167: (31.272499999999997, 121.3995), 44: (31.2695, 121.39550000000001), 45: (31.2705, 121.39550000000001), 47: (31.272499999999997, 121.39550000000001), 194: (31.2695, 121.40050000000001), 195: (31.2705, 121.40050000000001), 196: (31.2715, 121.40050000000001), 197: (31.272499999999997, 121.40050000000001), 77: (31.272499999999997, 121.3965), 224: (31.2695, 121.40150000000001), 225: (31.2705, 121.40150000000001), 
            226: (31.2715, 121.40150000000001), 227: (31.272499999999997, 121.40150000000001), 104: (31.2695, 121.39750000000001), 105: (31.2705, 121.39750000000001), 107: (31.272499999999997, 121.39750000000001), 376: (31.2715, 121.40650000000001), 281: (31.2665, 121.40350000000001), 251: (31.2665, 121.4025), 405: (31.2705, 121.40750000000001), 374: (31.2695, 121.40650000000001), 375: (31.2705, 121.40650000000001), 221: (31.2665, 121.40150000000001), 282: (31.2675, 121.40350000000001), 283: (31.2685, 121.40350000000001), 252: (31.2675, 121.4025), 253: (31.2685, 121.4025), 222: (31.2675, 121.40150000000001), 223: (31.2685, 121.40150000000001)}
    dic_final={33.0: [822, 792, 761, 762, 763, 732, 733], 32.0: [399, 368, 369, 370, 339, 371, 340, 338, 400, 341, 367, 401], 31.0: [578, 547, 548, 517, 518, 519, 488, 489, 490, 549, 520, 579], 30.0: [1088, 1089, 1058, 1059, 1090, 1060, 1030, 1057, 1000, 969, 939, 909, 878, 879, 848, 1087], 29.0: [887, 919, 945, 946, 915, 916, 947, 917, 948, 949, 886, 918], 28.0: [1067, 1068, 1037, 1038, 1007], 27.0: [641, 642, 790, 670, 671, 672, 673, 819, 820, 700, 701, 702, 703, 849, 850, 730, 731, 760], 26.0: [1291, 1292, 1172, 1173, 1174, 1202, 1203, 1204, 1083, 1084, 1232, 1233, 1234, 1112, 1113, 1114, 1115, 1116, 1117, 1262, 1263, 1265, 1142, 1143, 1144, 1146, 1147], 25.0: [785, 786, 788, 789, 814, 815, 816, 817, 818, 845, 847, 727, 755, 756, 757, 758, 759], 24.0: [904, 905, 906, 907, 908, 934, 935, 936, 937, 938, 968, 844, 846, 998, 999, 874, 875, 876, 877], 23.0: [1025, 1026, 1027, 1028, 1029, 964, 965, 966, 967, 995, 996, 997], 22.0: [1024, 1053, 1054, 1055, 1056, 1085, 1086, 963, 993, 994, 1023], 21.0: [1152, 1153, 1154, 1155, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1240, 1241, 1242, 1243, 1244, 1119, 1120, 1122, 1273, 1274, 1148, 1149, 1150, 1151], 20.0: [1293, 1294, 1295, 1296, 1321, 1322, 1323, 1324, 1325, 1326, 1205, 1351, 1352, 1353, 1354, 1355, 1235, 1381, 1382, 1383, 1384, 1264], 19.0: [1297, 1298, 1175, 1176, 1177, 1178, 1206, 1207, 1236, 1237, 1238, 1239, 1266, 1267, 1268, 1269, 1270, 1145], 18.0: [910, 1040, 1039, 1041, 911, 793, 1070, 821, 823, 975, 976, 977, 851, 852, 853, 1005, 880, 881, 1008, 883, 882], 17.0: [896, 769, 920, 798, 799, 800, 829, 830, 831, 834, 835, 858, 859, 860, 861, 862, 863, 864, 865, 866, 888, 889, 890, 891, 893, 894], 16.0: [921, 922, 923, 924, 950, 951, 952, 953, 954, 978, 979, 980, 981, 982, 983, 1009, 1010, 1011, 1012], 15.0: [1033, 1034, 912, 913, 914, 941, 942, 943, 944, 971, 972, 973, 974, 1001, 1002, 1003, 1004, 884], 14.0: [1156, 1035, 1036, 1186, 1063, 1064, 1065, 1066, 1069, 1093, 1094, 1095, 1096, 1097, 1098, 1123, 1124, 1125, 1126, 1127, 1128, 1006], 13.0: [795, 796, 797, 825, 826, 827, 828, 854, 855, 856, 857, 885], 12.0: [1031, 1032, 1061, 1062, 940, 1091, 1092, 970, 1118, 1121], 11.0: [774, 775, 776, 777, 778, 779, 801, 804, 805, 806, 807, 808, 809, 684, 685, 686, 832, 833, 836, 837, 838, 839, 714, 715, 716, 744, 745, 746], 10.0: [644, 645, 646, 647, 794, 674, 675, 676, 677, 824, 704, 705, 706, 707, 734, 735, 736, 764, 765], 9.0: [643, 528, 555, 557, 558, 581, 582, 584, 585, 586, 587, 588, 611, 612, 613, 614, 615, 616, 617, 618], 8.0: [404, 406, 407, 408, 409, 410, 434, 435, 436, 437, 438, 439, 440, 441, 464, 465, 466, 467, 468, 469, 470, 471, 349, 494, 495, 496, 497, 498, 499, 500, 379, 380], 7.0: [609, 610, 580, 550, 551, 552, 521], 6.0: [640, 666, 667, 668, 669, 696, 697, 698, 699, 728, 729, 606, 607, 636, 637, 638, 639], 5.0: [516, 522, 523, 397, 398, 546, 428, 429, 430, 695, 576, 577, 457, 459, 460, 725, 726, 608, 486, 487, 491, 492, 493], 4.0: [524, 402, 403, 553, 554, 431, 432, 433, 583, 461, 462, 463, 342, 343, 372, 373], 3.0: [256, 255, 346, 284, 344, 345, 314, 315, 316, 285, 254, 286], 2.0: [257, 135, 14, 15, 164, 165, 166, 167, 44, 45, 47, 194, 195, 196, 197, 77, 224, 225, 226, 227, 104, 105, 107], 1.0: [376, 281, 251, 405, 374, 375, 221, 282, 283, 252, 253, 222, 223]}
    
    
    df_result_new=pd.read_csv('data sample 3000-1.csv')

    for _idx, _row in df_result_new.iterrows():
        afternoon_amount=eval(_row['afternoon_amount'])
        sum_amount=0
        for value in afternoon_amount.values():
            sum_amount=sum_amount+value 
        #print(sum_amount)
        aa=eval(_row['arrival_time'])
        for i in aa.keys():
            aa[i]=datetime.datetime.strptime(aa[i][:19], "%Y-%m-%d %H:%M:%S")
        bb=eval(_row['final_time'])
        for i in bb.keys():
            bb[i]=datetime.datetime.strptime(bb[i][:19], "%Y-%m-%d %H:%M:%S")
        #print(bb)
        reward=-relay_time_func(route, eval(_row['GPS_location']), v_relay, dic_final, eval(_row['morning_amount']), eval(_row['afternoon_amount']), aa, bb, eval(_row['final_location']))/sum_amount

    return reward
    
    
    ## Convert the indices back into a tour
    #idx = tour_indices.unsqueeze(1).expand_as(static)
    #tour = torch.gather(static.data, 2, idx).permute(0, 2, 1)

    ## Make a full tour by returning to the start
    #y = torch.cat((tour, tour[:, :1]), dim=1)

    ## Euclidean distance between each consecutive point
    #tour_len = torch.sqrt(torch.sum(torch.pow(y[:, :-1] - y[:, 1:], 2), dim=2))

    #return tour_len.sum(1).detach()


def render(static, tour_indices, save_path):
    """Plots the found tours."""

    plt.close('all')

    num_plots = 3 if int(np.sqrt(len(tour_indices))) >= 3 else 1

    _, axes = plt.subplots(nrows=num_plots, ncols=num_plots,
                           sharex='col', sharey='row')

    if num_plots == 1:
        axes = [[axes]]
    axes = [a for ax in axes for a in ax]

    for i, ax in enumerate(axes):

        # Convert the indices back into a tour
        idx = tour_indices[i]
        if len(idx.size()) == 1:
            idx = idx.unsqueeze(0)

        # End tour at the starting index
        idx = idx.expand(static.size(1), -1)
        idx = torch.cat((idx, idx[:, 0:1]), dim=1)

        data = torch.gather(static[i].data, 1, idx).cpu().numpy()

        #plt.subplot(num_plots, num_plots, i + 1)
        ax.plot(data[0], data[1], zorder=1)
        ax.scatter(data[0], data[1], s=4, c='r', zorder=2)
        ax.scatter(data[0, 0], data[1, 0], s=20, c='k', marker='*', zorder=3)

        ax.set_xlim(0, 1)
        ax.set_ylim(0, 1)

    plt.tight_layout()
    plt.savefig(save_path, bbox_inches='tight', dpi=400)
